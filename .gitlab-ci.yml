cache:
  paths:
    - node_modules/



before_script:
  - npm install

stages:
  - test
  - build
  - build-docker
  - deploy-dev
  - deploy-staging
  - deploy-prod
test:
  image: node:8.9.0 # change to match your node version
  stage: test
  script:
    - CI=true npm run test-ci
    
build:
  image: node:8.9.0
  stage: build
  script:
    - CI=true npm run-script build
    - rm -rf public
    - mv build public
  artifacts:
    paths:
      - public/
    

build-docker:
  before_script:
    - echo "pass"
  stage: build-docker
  dependencies:
    - build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

variables:
  STAGING_NAMESPACE: app-stage
  PRODUCTION_NAMESPACE: app-prod



deploy-dev:
  before_script:
    - echo "pass"
  stage: deploy-dev
  image: alpine
  environment:
    name: development
    url: https://dev.bjourban.de
    # get kube_user and password from kubectl config view
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl config set-cluster bjourban.de --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --username="$KUBE_USER" --password="$KUBE_PASSWORD"
    - kubectl config set-context default --cluster=bjourban.de --user=admin
    - kubectl config use-context default
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry gitlab-registry -n development --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    - sed 's,_APP_NAME_,'"$CI_PROJECT_NAME"',g; s,_VERSION_,'"$CI_COMMIT_SHA"',g; s,_APP_ENV_,"development",g;s,_APP_HOST_,"dev.bjourban.de",g; s,_APP_AUTH_FILE_,"'"$DEV_AUTH_FILE"'",g; s,_APP_CONTAINER_IMAGE_,'"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"',g' kubernetes.tpl.yml > kubernetes.yml;
    - kubectl apply -f kubernetes.yml
  only:
    - development
  artifacts:
    paths:
      - kubernetes.yml

deploy-staging:
  before_script:
    - echo "pass"
  stage: deploy-staging
  image: alpine
  environment:
    name: staging
    url: https://staging.bjourban.de
    # get kube_user and password from kubectl config view
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl config set-cluster bjourban.de --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --username="$KUBE_USER" --password="$KUBE_PASSWORD"
    - kubectl config set-context default --cluster=bjourban.de --user=admin
    - kubectl config use-context default
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry gitlab-registry -n staging --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    - sed 's,_APP_NAME_,'"$CI_PROJECT_NAME"',g; s,_VERSION_,'"$CI_COMMIT_SHA"',g; s,_APP_ENV_,"staging",g;s,_APP_HOST_,"staging.bjourban.de",g; s,_APP_AUTH_FILE_,"'"$STAGING_AUTH_FILE"'",g; s,_APP_CONTAINER_IMAGE_,'"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"',g' kubernetes.tpl.yml > kubernetes.yml;

      kubernetes.tpl.yml > kubernetes.yml;
    - kubectl apply -f kubernetes.yml
  only:
    - release-*
  artifacts:
    paths:
      - kubernetes.yml



deploy-prod:
  before_script:
    - echo "pass"
  stage: deploy-prod
  image: alpine
  environment:
    name: production
    url: https://bjourban.de
    # get kube_user and password from kubectl config view
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl config set-cluster bjourban.de --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --username="$KUBE_USER" --password="$KUBE_PASSWORD"
    - kubectl config set-context default --cluster=bjourban.de --user=admin
    - kubectl config use-context default
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry gitlab-registry -n production --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    - sed 's,_APP_NAME_,'"$CI_PROJECT_NAME"',g; s,_VERSION_,'"$CI_COMMIT_SHA"',g; s,_APP_ENV_,"production",g;s,_APP_HOST_,"bjourban.de",g; s,_APP_CONTAINER_IMAGE_,'"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"',g' kubernetes.tpl.yml > kubernetes.yml;
    - sed -i '/_APP_AUTH_FILE_/d' kubernetes.yml;
    - kubectl apply -f kubernetes.yml
  when: manual
  only:
    - master

